% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipe_qplot.R
\name{pipe_qplot}
\alias{pipe_qplot}
\title{Pipe-able version of the \code{qplot()}}
\usage{
pipe_qplot(
  data,
  x,
  y,
  ...,
  facets = NULL,
  margins = FALSE,
  geom = "auto",
  xlim = c(NA, NA),
  ylim = c(NA, NA),
  log = "",
  main = NULL,
  xlab = NULL,
  ylab = NULL,
  asp = NA,
  stat = stat,
  position = position,
  save.options = NULL,
  print.plot = T
)
}
\arguments{
\item{data}{the data being passed through the pipeline}

\item{x, y, ...}{aesthetic arguments to be passed to the \code{\link[ggplot2:qplot]{qplot()}} function}

\item{facets, margins, geom, xlim, ylim, log, main, xlab, ylab, asp, stat, position}{see the \code{\link[ggplot2:qplot]{qplot()}} documentation for more
information regarding these arguments.}

\item{save.options}{list of values to be passed to \code{\link[ggplot2:ggsave]{ggsave()}}
(if NULL, plot won't be saved)}

\item{print.plot}{should the plot be displayed? Should only be used if
\code{save.options} is not NULL}
}
\description{
The \code{\link[ggplot2:qplot]{qplot()}} function is traditionally used
when your data is not stored in a data.frame/tibble and are
"loose" within your environment and can be convenient if you are
familiar with the base \code{plot()}, but haven't quite
learned the grammar of \code{ggplot2}.
It is a wrapper that creates a \code{\link[ggplot2:ggplot]{ggplot()}}
style plot.

However, creating a \code{\link[ggplot2:ggplot]{ggplot()}} object can be
complex and inconvenient, especially if you want a simple plot
(e.g. a basic histogram). It also requires you to either break
out of a pipeline, or ensure your \code{\link[ggplot2:ggplot]{ggplot()}}
functions are at the end of a pipe (or introduce curly braces
\code{{}} to your pipeline).

Therefore, the \code{pipe_qplot()} function will run a
\code{\link[ggplot2:qplot]{qplot()}} function for it's side effects and
return your original input unchanged. It can also save your plot
if needed.
}
\examples{

tibble::tibble(iris) \%>\%
  dplyr::group_by(Species) \%>\%
  pipe_qplot(Sepal.Length,
             fill=Species,
             geom="histogram",
             binwidth=0.1) \%>\%
  dplyr::summarise(mean = mean(Sepal.Length))



}
