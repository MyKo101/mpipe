% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dapply.R
\name{dapply}
\alias{dapply}
\title{Apply a function downwards through a recursive list}
\usage{
dapply(
  X,
  FUN,
  ...,
  element = as.character(substitute(X)),
  simplify = NULL,
  rev = F
)
}
\arguments{
\item{X}{a list which contains an element that is also a list}

\item{FUN}{the function to be applied to each list}

\item{element}{a single integer or character used to refer to an element in a list
via the \code{[[} subset, by default this will be the name of \code{X}}

\item{simplify}{a function or \code{NULL}. If a function is supplied, it will be
applied to the results}

\item{rev}{Logical. Should the elementsReturn the elements in reverse order?}
}
\description{
\code{dapply()} works similarly to the traditional \code{apply()}
family of functions, except it will dig downwards into
a recursive list. It will apply the \code{FUN} function to
the list and then, reapply it to an \code{element} in that
list. It repeats this until \code{element} is no longer found
}
\examples{

x.vect <- 1:5
y.vect <- letters[1:5]
z <- list(x=1,y="a")

for(i in 2:5)
{
  z <- list(x = x.vect[i],
            y = y.vect[i],
            z = z)
}

FUN <- function(X) c(X$x,X$y)

dapply(z,FUN,simplify=rbind)
}
