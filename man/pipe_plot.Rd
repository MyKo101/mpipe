% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipe-qplot.R
\name{pipe_plot}
\alias{pipe_plot}
\alias{pipe_qplot}
\title{Pipeable version of the \code{qplot()}}
\usage{
pipe_qplot(tbl, ..., save.options = NULL, print.plot = T)
}
\arguments{
\item{tbl}{The data.frame or tibble object being passed to through the pipeline}

\item{...}{Arguments to be passed to the \code{qplot()} function}

\item{save.options}{list of values to be passed to \code{ggsave()} (if NULL, plot won't be saved)}

\item{print.plot}{Should the plot be displayed? Should only be used if \code{save.options} is not NULL}
}
\description{
The \code{qplot()} function is traditionally used when your data is
not stored in a data.frame/tibble and are "loose" within your
environment and can be convenient if you are familiar with the
base \code{plot()}, but haven't quite learned the grammar of \code{ggplot2}.
It is a wrapper that creates a \code{ggplot()} style plot.

However, creating a \code{ggplot()} object can be complex and
inconvenient if you want a simple plot (e.g. a basic histogram).
If also requires you to either break out of a pipeline, or ensure
your \code{ggplot()} functions are at the end of a pipe (or introduce
curly braces \code{{}} to your pipeline)

The \code{pipe_qplot()} function will run a \code{qplot()} function for it's
side effects and return your original input unchanged
}
\examples{
tibble(iris) \%>\%
group_by(Species) \%>\%
pipe_qplot(Sepal.Length,fill=Species,geom="histogram",binwidth=0.1) \%>\%
summarise(mean = mean(Sepal.Length))



}
