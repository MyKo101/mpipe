% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/while_pipe.R
\name{while_pipe}
\alias{while_pipe}
\title{Perform an while-like loop in a pipeline}
\usage{
while_pipe(data, cond, fun)
}
\arguments{
\item{data}{the data being passed through the pipeline.}

\item{cond}{an expression to be evaluated in the context of \code{data} to
decide whether to perform \code{fun}. Should evaluate to a single
logical value or be coercible to one.}

\item{fun}{pipeline to perform until \code{cond} is \code{FALSE}.}
}
\description{
Allows the user to perform a while-like
loop without breaking out of a pipeline.
To maintain the flow of a pipeline, it is recommended
to use [\code{fseq}][] style arguments (i.e. pipelines) for the
\code{fun} argument.

Within the \code{while_pipe()}, users can use the \code{.counter} variable
to reference how many iterations have been performed so far.
}
\examples{

sample(100,1) \%>\%
  runif \%>\%
  pipe_cat("Current length: ",length(.),"\n") \%>\%
  while_pipe(length(.) > 1,
             . \%>\%
               diff \%>\%
               magrittr::divide_by(2))


tibble::tibble(x = runif(5)) \%>\%
  while_pipe(.counter <= 5,
             . \%>\%
               dplyr::mutate(!!paste0("x_",.counter) := x - x[.counter]))



}
