% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/if_branch.R
\name{if_branch}
\alias{if_branch}
\title{Perform an if/else-like branch in a pipeline}
\usage{
if_branch(data, predicate, fun, elsefun = NULL)
}
\arguments{
\item{data}{the data being passed through the pipeline}

\item{predicate}{logical statement, a function or an expression that
can be evaluated in the context of \code{data}
to decide which branch to follow}

\item{fun}{pipeline to follow if \code{predicate} evaluates as \code{TRUE}}

\item{elsefun}{pipeline to follow if \code{predicate} evaluates as \code{FALSE}, or
\code{NULL} if nothing is to happen to the original \code{data}.}
}
\description{
Allows the user to perform an if/else-like
branch without breaking out of a pipeline.
To maintain the flow of a pipeline, it is recommended
to use \code{fseq} style arguments (i.e. pipelines) for \code{fun} and
\code{elsefun}, however any function can be used.
}
\examples{

1 \%>\%
  magrittr::multiply_by(2) \%>\%
  if_branch(
    . \%>\% magrittr::equals(2),
    . \%>\%
      magrittr::multiply_by(3) \%>\%
      magrittr::add(2)
  ) \%>\%
  magrittr::multiply_by(2)

tibble::tibble(x = rnorm(100), y = rnorm(100)) \%>\%
  dplyr::mutate(z = x + y) \%>\%
  if_branch(
    mean(z) > 0,
    . \%>\%
      pipe_cat("z is high\n\n"),
    . \%>\%
      dplyr::select(-z) \%>\%
      pipe_cat("z is low, so it was dropped\n\n")
  )
}
