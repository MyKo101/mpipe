fseq_add_args(f,a,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
new_args <- enquos(...)
new_args <- as.list(enquos)
new_args
}
fun_add_arg(f,a=1,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
new_args <- enquos(...)
new_args <- as.list(new_args)
new_args
}
fun_add_arg(f,a=1,b)
`%>%`
magrittr::is_placeholder
magrittr:::is_placeholder
?substitute
?as.pairlist
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
dot_quo <- enquos(...)
dot_quo <- as.list(dot_quo)
new_arg_vals <- lapply(dot_quo,quo_get_expr)
new_arg_names <- names(dot_quo)
new_args <- as.pairlist(new_arg_vals)
names(new_args) <- new_arg_names
new_args
}
fun_add_arg(f,a=1,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
dot_quo <- enquos(...)
dot_quo <- as.list(dot_quo)
new_arg_vals <- lapply(dot_quo,quo_get_expr)
empty_arg <- lapply(new_arg_vals,identical,quote( ))
empty_arg}
fun_add_arg(f,a=1,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
dot_quo <- enquos(...)
dot_quo <- as.list(dot_quo)
new_arg_vals <- lapply(dot_quo,quo_get_expr)
}
fun_add_arg(f,a,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
dot_quo <- enquos(...)
dot_quo <- as.list(dot_quo)
new_arg_vals <- lapply(dot_quo,quo_get_expr)
new_arg_vals
}
fun_add_arg(f,a,b)
fun_add_arg(f,a=1,b)
fun_add_arg(f,a=1,b) -> y
y
y[[2]]
fun_add_arg(f,a=1,b) -> y
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
dot_quo <- enquos(...)
dot_quo <- as.list(dot_quo)
new_arg_vals <- lapply(dot_quo,quo_get_expr)
empty_args <- which(names(new_arg_vals) == "")
empty_args
}
fun_add_arg(f,a=1,b) -> y
y
quote(``)
quote(` `)
quote(' ')
quote(\')
quote(\\')
quote(` `)
quote(mean)
identical(quote(mean),quote(`mean`))
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
dot_quo <- enquos(...)
dot_quo <- as.list(dot_quo)
new_arg_vals <- lapply(dot_quo,quo_get_expr)
empty_args <- which(names(new_arg_vals) == "")
new_arg_names <- names(new_arg_vals)
new_arg_names[empty_args] <- new_arg_vals[empty_args]
new_arg_names
}
fun_add_arg(f,a=1,b) -> y
y
pairlist(a=1)
pairlist(a=1,b=)
alist(a=1,b=)
alist(a=b)
alist(a=b+1)
alist(a=b+1,c)
alist(a=b+1,c=2)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
alist(...)
}
fun_add_arg(f,a=1,b) -> y
y
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
alist(!!enquos(...))
}
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
alist(!!!enquos(...))
}
fun_add_arg(f,a=1,b) -> y
y
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
as.call(!!!enquos(...))
}
fun_add_arg(f,a=1,b) -> y
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
substitute(...)
}
fun_add_arg(f,a=1,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
enquos(...)
}
fun_add_arg(f,a=1,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
list2(...)
}
fun_add_arg(f,a=1,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
list(...)
}
fun_add_arg(f,a=1,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
enquos(...)
}
enquos
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
match.call()
}
fun_add_arg(f,a=1,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
sys.call()
}
fun_add_arg(f,a=1,b)
fun_add_arg <- function(f,...)
{
current_args <- formals(f)
match.call()
}
fun_add_arg(f,a=1,b)
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
match.call()
}
fun_add_arg(f,a=1,b)
fun_add_arg(f,a=1,b) -> y
y
length(y)
y[1]
y[[1]]
y[[2]]
y[[3]]
y[[4]]
names(y)
y[[4]] <- ``
y[[4]] <- ` `
y[[4]] <- `uote() `)
y[[4]] <- quote(` `)
y
fun_add_arg(f,a=1,b) -> y
y
names(y)
y[-(1:2)]
names(y[-(1:2)])
y
as.pairlist(y)
list(y)
as.list(y)
call
y
call <- y
call <- as.list(y)
call
args <- call[-c(1,which(names(call) == "f"))]
args
(any(names(args) == ""))
unnamed_args <- which(names(args) == "")
args[unnamed_args]
as.character(args[unnamed_args])
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
}
args
}
fun_add_arg(f,a=1,b,d="hello","One"="Two") -> y
y
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
args
y
args <- y
args
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
}
list(args,unnamed_args)
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
args <- y$args
unnamed_args <- y$unnamed_args
args
y
args <- y[[1]]
unnamed_args <- y[[2]]
args
unnamed_args
setdiff(1:length(args),unnamed_args)
c(unnamed_args,setdiff(1:length(args),unnamed_args))
args[c(unnamed_args,setdiff(1:length(args),unnamed_args))]
setdiff(1:length(args),unnamed_args)
named_args <- setdiff(1:length(args),unnamed_args)
unnamed_args
args
args$e <- ``
args$e <- quote(` `)
args
as.pairlist(args)
?formals
formals
rep_list(quote(` `),length(unnamed_args))
length(unnamed_args)
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- pairlist(args)
args}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- pairlist(args)
args}
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- pairlist(args)
args}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
names(y)
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
args}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
nameS(y)
names(y)
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
args <- args[c(unnamed_args,named_args)]
}
args
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
y[unnamed_args]
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
#args <- args[c(unnamed_args,named_args)]
}
args
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y[unnamed_args]
y$a
y$b
?tag
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
for(i in unnamed_args)
args[[i]] <- quote(` `)
args <- args[c(unnamed_args,named_args)]
}
args
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
?as.functio
?as.function
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
for(i in unnamed_args)
args[[i]] <- quote(` `)
args <- args[c(unnamed_args,named_args)]
}
#args
new_f <- copy_fun(f)
formals(new_f) <- args
new_f
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> g
f
g
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
for(i in unnamed_args)
args[[i]] <- quote(` `)
args <- args[c(unnamed_args,named_args)]
}
#args
new_f <- copy_fun(f)
formals(new_f) <- args
class(new_f) <- class(f)
new_f
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> g
f
g
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
for(i in unnamed_args)
args[[i]] <- quote(` `)
args <- args[c(unnamed_args,named_args)]
}
args <- c(current_args,args)
new_f <- copy_fun(f)
formals(new_f) <- args
class(new_f) <- class(f)
new_f
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> g
g
y
class(y)
y <- as.pairlist(y)
y
class(y)
y <- c(y,alist(j=1))
y
y <- c(y,alist(h=))
y
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
args2 <- args[named_args]
args1 <- args[unnamed_args]
}
args1}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
as.pairlist(y)
alist(b=,e=,f=,g=)
as.pairlist(y)
y
do.call(paste,y)
lapply(y,as.character)
do.call(paste,lapply(y,as.character))
do.call(paste,lapply(y,as.character),collaps="=,")
do.call(paste,lapply(y,as.character),collapse="=,")
?do.call
do.call(paste,c(lapply(y,as.character),collapse="=,"))
do.call(paste,c(lapply(y,as.character),sep="=,"))
do.call(paste,c(vapply(y,as.character,character(1)),sep="=,"))
vapply(y,as.character,character(1))
rm(list=ls())
update_my_package()
install.packages("badger")
Get_Version
installed.packages()["mutils","Version"]
installed.packages()["mutils","Version"]
