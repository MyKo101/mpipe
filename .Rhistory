subdir, "DESCRIPTION")
attach(as.list(formals(remotes:::github_DESCRIPTION)))
url <- remotes:::build_url(host, "repos", username, repo, "contents",
subdir, "DESCRIPTION")
username
repo
remote
username = remote$username
repo = remote$repo
subdir = remote$subdir
host = remote$host
ref = remote$ref
pat = remote$auth_token %||% remotes:::github_pat()
use_curl = use_curl
url <- remotes:::build_url(host, "repos", username, repo, "contents",
subdir, "DESCRIPTION")
url
url <- paste0(url, "?ref=", utils::URLencode(ref))
url
ref <- "x"
url <- paste0(url, "?ref=", utils::URLencode(ref))
ur
url
url <- remotes:::build_url(host, "repos", username, repo, "contents",
subdir, "DESCRIPTION")
url <- paste0(url, "?ref=", utils::URLencode(ref))
url
h <- curl::new_handle()
headers <- c(Accept = "application/vnd.github.v3.raw",
if (!is.null(pat)) {
c(Authorization = paste0("token ", pat))
})
curl::handle_setheaders(h, .list = headers)
res <- curl::curl_fetch_memory(url, handle = h)
res
ref
rawToChar(res$content)
url
url <- remotes:::build_url(host, "repos", username, repo, "contents",
subdir, "DESCRIPTION")
url
h <- curl::new_handle()
headers <- c(Accept = "application/vnd.github.v3.raw",
if (!is.null(pat)) {
c(Authorization = paste0("token ", pat))
})
curl::handle_setheaders(h, .list = headers)
res <- curl::curl_fetch_memory(url, handle = h)
res
rawToChar(res$content)
read_dcf
remotes:::read_dcf
url
remotes
remote <- remotes[[2]]
remote <- remotes[[1]]
remote
url <- remotes:::build_url(host, "repos", username, repo, "contents",
subdir, "DESCRIPTION")
url
download(tmp, url, auth_token = pat)
tmp <- tempfile()
on.exit(unlink(tmp), add = TRUE)
tmp <- tempfile()
remotes:::download(tmp, url, auth_token = pat)
base64_decode(gsub("\\\\n", "", json$parse_file(tmp)$content))
remotes:::base64_decode(gsub("\\\\n", "", json$parse_file(tmp)$content))
remotes:::base64_decode(gsub("\\\\n", "", remotes:::json$parse_file(tmp)$content))
url
url <- paste0(url, "?ref=", utils::URLencode(ref))
remotes:::download(tmp, url, auth_token = pat)
remotes:::base64_decode(gsub("\\\\n", "", remotes:::json$parse_file(tmp)$content))
github_DESCRIPTION2 <- function (username, repo, subdir = NULL, ref = "master",
host = "api.github.com", ..., use_curl = !is_standalone() &&
pkg_installed("curl"), pat = github_pat())
{
if (!is.null(subdir)) {
subdir <- utils::URLencode(subdir)
}
url <- remotes:::build_url(host, "repos", username, repo, "contents",
subdir, "DESCRIPTION")
if(ref != "")
{
url <- paste0(url, "?ref=", utils::URLencode(ref))
}
if (isTRUE(use_curl)) {
h <- curl::new_handle()
headers <- c(Accept = "application/vnd.github.v3.raw",
if (!is.null(pat)) {
c(Authorization = paste0("token ", pat))
})
curl::handle_setheaders(h, .list = headers)
res <- curl::curl_fetch_memory(url, handle = h)
if (res$status_code >= 300) {
stop(github_error(res))
}
rawToChar(res$content)
}
else {
tmp <- tempfile()
on.exit(unlink(tmp), add = TRUE)
tmp <- tempfile()
remotes:::download(tmp, url, auth_token = pat)
remotes:::base64_decode(gsub("\\\\n", "", remotes:::json$parse_file(tmp)$content))
}
}
remotes:::github_DESCRIPTION(username = remote$username, repo = remote$repo,
subdir = remote$subdir, host = remote$host, ref = remote$ref,
pat = remote$auth_token %||% github_pat(), use_curl = use_curl)
github_DESCRIPTION2(username = remote$username, repo = remote$repo,
subdir = remote$subdir, host = remote$host, ref = remote$ref,
pat = remote$auth_token %||% github_pat(), use_curl = use_curl)
local_sha <- local_sha(package_name)
local_sha <- remotes:::local_sha(package_name)
local_sha
remote
package_name <- remotes:::remote_package_name(remote)
package_name <- "secret"
local_sha <- remotes:::local_sha(package_name)
local_sha
remote_sha <- remotes:::remote_sha(remote, local_sha)
remote_sha
remotes:::remote_sha
remotes:::remote_sha.github_remote
remotes:::github_commit
#which calls github_commit(), this is where the API call will happen:
username <- remote$username
remote
#which calls github_commit(), this is where the API call will happen:
username <- remote$username
repo <- remote$repo
host <- remote$host
ref <- remote$ref #THIS IS THE BRANCH NAME
pat <- remote$auth_token %||% remotes:::github_pat()
use_curl <- use_curl
current_sha <- NULL)
current_sha <- NULL
ref
url <- build_url(host, "repos", username, repo, "commits",
utils::URLencode(ref, reserved = TRUE))
url <- remote:::build_url(host, "repos", username, repo, "commits",
utils::URLencode(ref, reserved = TRUE))
url <- remotes:::build_url(host, "repos", username, repo, "commits",
utils::URLencode(ref, reserved = TRUE))
url
ref <- "x"
url <- remotes:::build_url(host, "repos", username, repo, "commits",
utils::URLencode(ref, reserved = TRUE))
url
url <- remotes:::build_url(host, "repos", username, repo, "commits",
utils::URLencode(ref, reserved = TRUE))
ref <- ""
tmp <- tempfile()
on.exit(unlink(tmp), add = TRUE)
download(tmp, url, auth_token = pat)
tmp <- tempfile()
on.exit(unlink(tmp), add = TRUE)
remotes:::download(tmp, url, auth_token = pat)
remotes:::get_json_sha(paste0(readLines(tmp, warn = FALSE), collapse = "\n"))
ref <- "x"
url <- remotes:::build_url(host, "repos", username, repo, "commits",
utils::URLencode(ref, reserved = TRUE))
tmp <- tempfile()
on.exit(unlink(tmp), add = TRUE)
remotes:::download(tmp, url, auth_token = pat)
remotes:::get_json_sha(paste0(readLines(tmp, warn = FALSE), collapse = "\n"))
h <- curl::new_handle()
headers <- c(Accept = "application/vnd.github.v3.sha",
if (!is.null(pat)) {
c(Authorization = paste0("token ", pat))
})
if (!is.null(current_sha)) {
headers <- c(headers, `If-None-Match` = paste0("\"",
current_sha, "\""))
}
curl::handle_setheaders(h, .list = headers)
res <- curl::curl_fetch_memory(url, handle = h)
rawToChar(res$content)
ref <- ""
url <- remotes:::build_url(host, "repos", username, repo, "commits",
utils::URLencode(ref, reserved = TRUE))
h <- curl::new_handle()
headers <- c(Accept = "application/vnd.github.v3.sha",
if (!is.null(pat)) {
c(Authorization = paste0("token ", pat))
})
if (!is.null(current_sha)) {
headers <- c(headers, `If-None-Match` = paste0("\"",
current_sha, "\""))
}
curl::handle_setheaders(h, .list = headers)
res <- curl::curl_fetch_memory(url, handle = h)
if (res$status_code == 304) {
return(current_sha)
}
if (res$status_code >= 300) {
stop(github_error(res))
}
rawToChar(res$content)
remotes:::github_commit
url <- remotes:::build_url(host, "repos", username, repo, "commits",
utils::URLencode(ref, reserved = TRUE))
url
ref
url <- remotes:::build_url(host, "repos", username, repo, "commits",
utils::URLencode(ref, reserved = TRUE))
h <- curl::new_handle()
headers <- c(Accept = "application/vnd.github.v3.sha",
if (!is.null(pat)) {
c(Authorization = paste0("token ", pat))
})
if (!is.null(current_sha)) {
headers <- c(headers, `If-None-Match` = paste0("\"",
current_sha, "\""))
}
curl::handle_setheaders(h, .list = headers)
res <- curl::curl_fetch_memory(url, handle = h)
res
names(res)
res$content[1:10]
res2 <- rawToChar(res$content$content)
res2 <- rawToChar(res$content)
res2
ref <- "x"
url <- remotes:::build_url(host, "repos", username, repo, "commits",
utils::URLencode(ref, reserved = TRUE))
url
res <- curl::curl_fetch_memory(url, handle = h)
res$content
url
h
nameS(h)
names(h)
length(h)
h[[1]]
h[[1]
]
h[1]
class(h)
print.default(h)
headers
at
pat
pat <- remote$auth_token %||% remotes:::github_pat()
pat
remotes:::github_pat()
pat <- remote$auth_token %||% (remotes:::github_pat())
pat
remote$auth_token
remote <- remotes[[1]]
remote$auth_token
curl::handle_setheaders(h, .list = headers)
h
curl::curl_fetch_memory
git("status")
library(mutils)
git("status")
update_my_package("fixed mutils main problem")
git("push origin HEAD")
git("status")
git("push")
git("push origin HEAD:master")
git("status")
git("branch -m main master")
git("status")
update_my_package("update to main")
git("checkout main")
git("status")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
options(crayon.enabled=NULL)
# install.packages("devtools")
# devtools::install_github("MyKo101/mpipe")
library(mpipe)
library(dplyr)
library(magrittr)
library(palmerpenguins)
library(mutils)
library(ggplot2)
penguins <- palmerpenguins::penguins %>%
select(-body_mass_g,-flipper_length_mm) %>%
filter_all(~!is.na(.))
summarise_my_data <- . %>%
group_by(species,island,sex) %>%
summarise_all(mean,.groups="keep")
summarise_my_data
summarise_my_data(penguins)
filter_my_data + summarise_my_data
filter_my_data <- . %>%
filter(culmen_length_mm > 43) %>%
select(species,island,sex,culmen_length_mm)
filter_my_data
filter_my_data + summarise_my_data
(filter_my_data + summarise_my_data)(penguins)
(filter_my_data + summarise_my_data)(penguins)
reinstall_my_package()
filter
unload_packages("dplyr")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
options(crayon.enabled=NULL)
# install.packages("devtools")
# devtools::install_github("MyKo101/mpipe")
library(mpipe)
library(dplyr)
library(magrittr)
library(palmerpenguins)
library(mutils)
library(ggplot2)
penguins <- palmerpenguins::penguins %>%
select(-body_mass_g,-flipper_length_mm) %>%
filter_all(~!is.na(.))
penguins
(filter_my_data + summarise_my_data)(penguins)
filter_my_data
summarise_my_data
(filter_my_data + summarise_my_data)
(filter_my_data + summarise_my_data)(penguins)
filter_my_data <- . %>%
filter(culmen_length_mm > 43) %>%
select(species,island,sex,culmen_length_mm)
filter_my_data
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
options(crayon.enabled=NULL)
pkgs <- c("dplyr","magrittr","palmerpenguins","mutils","ggplot2")
purrr:::walk(pkgs,library,character.only=T)
penguins <- palmerpenguins::penguins %>%
select(-body_mass_g,-flipper_length_mm) %>%
filter_all(~!is.na(.))
lapply(pkgs,library,character.only=T)
invisible(lapply(pkgs,library,character.only=T))
?library
invisible(lapply(pkgs,library,character.only=T,quietly=T))
getOption("verbose")
invisible(lapply(pkgs,library,character.only=T,warn.conflicts=F))
mutils::load_packages(dplyr,magrittr,palmerpenguins,mutils,ggplot2)
reload_my_packages("mutils")
mutils::reload_my_packages("mutils")
mutils::reload_packages("mutils")
mutils::load_packages(dplyr,magrittr,palmerpenguins,mutils,ggplot2)
mutils::load_packages(dplyr,magrittr,palmerpenguins,mutils,ggplot2)
penguins <- palmerpenguins::penguins %>%
select(-body_mass_g,-flipper_length_mm) %>%
filter_all(~!is.na(.))
penguins %>%
pipe_qplot(culmen_length_mm, culmen_depth_mm, col = species,
xlab = "Culmen Length (mm)", ylab = "Culmun Depth (mm)",
theme = "light", facets = sex ~ island) %>%
filter(island == "Biscoe") %>%
pipe_cat("Biscoe Average Culmun Length (mm):", mean(culmen_length_mm), "\n") %>%
group_by(species,sex) %>%
pipe_cat(sex, species, "Average Culmun Length (mm):", mean(culmen_length_mm), "\n") %>%
summarise_if(is.numeric, list(mean=mean,sd=sd))
penguins %>%
pipe_qplot(culmen_length_mm, culmen_depth_mm, col = species,
xlab = "Culmen Length (mm)", ylab = "Culmun Depth (mm)",
theme = "light", facets = sex ~ island) %>%
filter(island == "Biscoe") %>%
pipe_cat("Biscoe Average Culmun Length (mm):", mean(culmen_length_mm), "\n\n") %>%
group_by(species,sex) %>%
pipe_cat(sex, species, "Average Culmun Length (mm):", mean(culmen_length_mm), "\n") %>%
summarise_if(is.numeric, list(mean=mean,sd=sd))
penguins %>%
pipe_qplot(culmen_length_mm, culmen_depth_mm, col = species,
xlab = "Culmen Length (mm)", ylab = "Culmun Depth (mm)",
theme = "light", facets = sex ~ island) %>%
filter(island == "Biscoe") %>%
pipe_cat("Biscoe Average Culmun Length (mm):", mean(culmen_length_mm), "\n\n") %>%
group_by(species,sex) %>%
pipe_cat(sex, species, "Average Culmun Length (mm):", mean(culmen_length_mm), "\n") %>%
summarise_if(is.numeric, mean)
while_pipe
update_my_package()
unload_packages("mutils")
unload_packages(mutils)
covr::codecov
github_head_ref <- Sys.getenv("GITHUB_HEAD_REF")
Sys.getenv("GITHUB_HEAD_REF")
?devtools::check
library(mutils)
library(mutils)
git("status")
update_my_package("updated README.Rmd")
git("pull")
git("pull")
git("status")
git("commit -m 'fix mistake'")
git('commit -m "fix mistake"')
git("pull")
git("add DESCRIPTION")
git("add README.Rmd")
git("add README.md")
git("status")
git("pull")
git("merge --abort")
git("status")
git("merge --abort")
git("status")
git("pull")
usethis::use_tidy_style()
git("status")
git("pull")
git("add -A")
git("pull")
git("merge --abort")
git("stash")
git("pull")
git("pull")
git("merge --abort")
git("pull")
git("status")
git("mergetool")
y
git('commit -m "fixed merge issue"')
git("merge")
git("push")
git("pull DESCRIPTION")
git("checkout main")
git("stash")
git("stash")
git("merge --abort")
git("stash")
git("checkout main")
git("pull")
git("reset --hard")
git("status")
git("checkout 48027ca55c40f298cf035da7b5c743100d11cf29")
git("status")
git("pull")
git("pull main")
git("pull origin main")
git("status")
git("pull")
git("checkout main")
git("pull")
git("pull")
git("checkout main")
git("status")
git("add DESCRIPTION")
git("add README.Rmd")
git("add README.md")
git('commit -m "re-merging"')
git("status")
git("push")
git("status")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
options(crayon.enabled=NULL)
summarise_my_data <- . %>%
group_by(species,island,sex) %>%
summarise_all(mean,.groups="keep")
summarise_my_data
summarise_my_data(penguins)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
options(crayon.enabled=NULL)
# install.packages("devtools")
# devtools::install_github("MyKo101/mpipe")
library(mpipe)
mutils::load_packages(dplyr, magrittr, palmerpenguins, mutils, ggplot2)
penguins <- palmerpenguins::penguins %>%
select(-body_mass_g,-flipper_length_mm) %>%
filter_all(~!is.na(.))
summarise_my_data <- . %>%
group_by(species,island,sex) %>%
summarise_all(mean,.groups="keep")
summarise_my_data
summarise_my_data(penguins)
filter_my_data <- . %>%
filter(culmen_length_mm > 43) %>%
select(species,island,sex,culmen_length_mm)
filter_my_data
filter_my_data + summarise_my_data
(filter_my_data + summarise_my_data)(penguins)
fn_env(`%>%`)
library(rlang)
fn_env(`%>%`)
library(magrittr)
fn_env(`%>%`)
env_parents(fn_env(`%>%`))
names(fn_env(`%>%`))
fn_env(`%>%`)
env_print(fn_env(`%>%`))
env_print(fn_env(`%<>%`))
env_print(fn_env(`%T>%`))
env_print(fn_env(`%>%`))
env_print(fn_env(freduce))
freduce
mutils::load_packages(memoise)
?memoise
memoise
