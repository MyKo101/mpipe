args
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
}
list(args,unnamed_args)
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
args <- y$args
unnamed_args <- y$unnamed_args
args
y
args <- y[[1]]
unnamed_args <- y[[2]]
args
unnamed_args
setdiff(1:length(args),unnamed_args)
c(unnamed_args,setdiff(1:length(args),unnamed_args))
args[c(unnamed_args,setdiff(1:length(args),unnamed_args))]
setdiff(1:length(args),unnamed_args)
named_args <- setdiff(1:length(args),unnamed_args)
unnamed_args
args
args$e <- ``
args$e <- quote(` `)
args
as.pairlist(args)
?formals
formals
rep_list(quote(` `),length(unnamed_args))
length(unnamed_args)
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- pairlist(args)
args}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- pairlist(args)
args}
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- pairlist(args)
args}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
names(y)
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
args}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
nameS(y)
names(y)
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
args <- args[c(unnamed_args,named_args)]
}
args
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
y[unnamed_args]
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
#args <- args[c(unnamed_args,named_args)]
}
args
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y[unnamed_args]
y$a
y$b
?tag
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
for(i in unnamed_args)
args[[i]] <- quote(` `)
args <- args[c(unnamed_args,named_args)]
}
args
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
?as.functio
?as.function
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
for(i in unnamed_args)
args[[i]] <- quote(` `)
args <- args[c(unnamed_args,named_args)]
}
#args
new_f <- copy_fun(f)
formals(new_f) <- args
new_f
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> g
f
g
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
for(i in unnamed_args)
args[[i]] <- quote(` `)
args <- args[c(unnamed_args,named_args)]
}
#args
new_f <- copy_fun(f)
formals(new_f) <- args
class(new_f) <- class(f)
new_f
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> g
f
g
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
names(args)[unnamed_args] <- as.character(args[unnamed_args])
for(i in unnamed_args)
args[[i]] <- quote(` `)
args <- args[c(unnamed_args,named_args)]
}
args <- c(current_args,args)
new_f <- copy_fun(f)
formals(new_f) <- args
class(new_f) <- class(f)
new_f
}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> g
g
y
class(y)
y <- as.pairlist(y)
y
class(y)
y <- c(y,alist(j=1))
y
y <- c(y,alist(h=))
y
fun_add_arg <- function(f,...)
{
if(!is.function(f))
rlang::abort("f is not a function object")
current_args <- formals(f)
call <- as.list(match.call())
args <- call[-c(1,which(names(call) == "f"))]
args <- as.pairlist(args)
if(any(names(args) == ""))
{
unnamed_args <- which(names(args) == "")
named_args <- which(names(args) != "")
args2 <- args[named_args]
args1 <- args[unnamed_args]
}
args1}
fun_add_arg(f,a=1,b,d="hello","One"="Two",e,f,g) -> y
y
as.pairlist(y)
alist(b=,e=,f=,g=)
as.pairlist(y)
y
do.call(paste,y)
lapply(y,as.character)
do.call(paste,lapply(y,as.character))
do.call(paste,lapply(y,as.character),collaps="=,")
do.call(paste,lapply(y,as.character),collapse="=,")
?do.call
do.call(paste,c(lapply(y,as.character),collapse="=,"))
do.call(paste,c(lapply(y,as.character),sep="=,"))
do.call(paste,c(vapply(y,as.character,character(1)),sep="=,"))
vapply(y,as.character,character(1))
rm(list=ls())
update_my_package()
install.packages("badger")
Get_Version
installed.packages()["mutils","Version"]
installed.packages()["mutils","Version"]
installed.packages()["mutils","Version"]
installed.packages()["mutils","Version"]
update_my_package()
mutils::update_my_package()
Match_Version_Github("MyKo101","mpipe")
git("status")
usethis::use_tidy_style()
warnings()
update_my_package()
devtools::check
update_my_package(verbose=T)
update_my_package(verbose=T)
reload_packages("mutils")
update_my_package(verbose=T)
update_my_package
usethis::use_tidy_style()
git("status")
update_my_package("Removed iris and various updates",verbose=T)
git("status")
git("pull")
git("pull")
git("status")
git("pull")
git("rm README.md")
git("pull")
git("commit")
git("status")
git("pull")
git("commit")
update_my_package("Removed iris and various updates",verbose=T)
update_my_package(verbose=T)
penguins %>%
group_by(species) %>%
switch_branch("Gentoo",
Gentoo = . %>%
filter(species == "Gentoo"),
Adelie = . %>%
filter(species == "Adelie")
) %>%
pull(culmen_length) %>%
mean()
library(mpipe)
penguins %>%
group_by(species) %>%
switch_branch("Gentoo",
Gentoo = . %>%
filter(species == "Gentoo"),
Adelie = . %>%
filter(species == "Adelie")
) %>%
pull(culmen_length) %>%
mean()
git("pull")
options()
names(options)
names(options())
install.packages("vctrs")
100/sqrt(3/4)
97.5/(1.5)
65/sqrt(3/4)
27.85714285714286*(3+0.5)
97.5/(1+0.5)
?structure
x <- 1:3
x <- 1:100
x
min <- 10
max <- 50
x0 <- x
x[x<min] <- 0
x[x>max] <- 0
x
xm <- matrix(rep(x,each=degree),ncol=degree)
coefs <- c(1,2,3)
xm <- matrix(rep(x,each=degree),ncol=degree)
degree <- length(coefs)
xm <- matrix(rep(x,each=degree),ncol=degree)
xm
dim(xm)
?rep
xm <- matrix(rep(x,times=degree),ncol=degree)
xm
y <- x
zeros <- (x < min | max < x)
zeroes
zeros
y <- x
zeros <- (x < min | max < x)
y <- x[min <= x & x <= max]
x
x <- x0
y <- x
zeros <- (x < min | max < x)
y <- x[min <= x & x <= max]
x
y
ym <- matrix(rep(y,times=degree),ncol=degree)
ym
deg <- matrix(rep(coefficients,each=length(degree)),ncol=degree)
coefficients
coefficients <- coefs
output_env <- new.env()
output_env[["coefficients"]] <- coefs
output_env[["min"]] <- min
output_env[["max"]] <- max
output_env[["degree"]] <- length(coefs)
output_env
env_print(output_env)
rlang::env_print(output_env)
x
y
y <- x
zeros <- (x < min | max < x)
y <- x[min <= x & x <= max]
ym <- matrix(rep(y,times=degree),ncol=degree)
deg <- matrix(rep(coefficients,each=length(degree)),ncol=degree)
deg
deg <- matrix(rep(coefficients,each=length(y)),ncol=degree)
deg
output_env[["degree"]] <- length(coefs)-1
degree <- output_env[["degree"]]
degree
coef
coefs
y <- x
zeros <- (x < min | max < x)
y <- x[min <= x & x <= max]
ym <- matrix(rep(y,times=degree),ncol=degree+1)
degree
ym <- matrix(rep(y,times=degree+1),ncol=degree+1)
ym
deg <- matrix(rep(coefficients,each=length(y)),ncol=degree+1)
deg
deg <- matrix(rep(0:degree,each=length(y)),ncol=degree+1)
deg
co <- matrix(rep(coefficients,each=length(y)),ncol=degree+1)
co
ym,
co*ym^deg
ym^deg
rowSums(co*ym^deg)
res0 <- rowSums(co*ym^deg)
res0
res <- rep(0,length(x))
res[!zeros] <- rowSums(co*ym^deg)
res
output_env[["fun"]] <- function(x) {
y <- x
zeros <- (x < min | max < x)
y <- x[min <= x & x <= max]
res <- rep(0,length(x))
ym <- matrix(rep(y,times=degree+1),ncol=degree+1)
deg <- matrix(rep(0:degree,each=length(y)),ncol=degree+1)
co <- matrix(rep(coefficients,each=length(y)),ncol=degree+1)
res[!zeros] <- rowSums(co*ym^deg)
res
}
poly <- function(...,min=-Inf,max=Inf){
coefs <- as.numeric(unlist(list(...)))
output_env <- new.env()
output_env[["coefficients"]] <- coefs
output_env[["min"]] <- min
output_env[["max"]] <- max
output_env[["degree"]] <- length(coefs)-1
output_env[["fun"]] <- function(x) {
y <- x
zeros <- (x < min | max < x)
y <- x[min <= x & x <= max]
res <- rep(0,length(x))
ym <- matrix(rep(y,times=degree+1),ncol=degree+1)
deg <- matrix(rep(0:degree,each=length(y)),ncol=degree+1)
co <- matrix(rep(coefficients,each=length(y)),ncol=degree+1)
res[!zeros] <- rowSums(co*ym^deg)
res
}
structure(output_env[["fun"]],
class="poly")
}
poly(1,2,3)
f <- poly(1,2,3)
f
f(1)
f(2)
f(3)
x <- f
x
environment(x)
environment(x)$coefficients
environment(x)$coefficient
names(environment(x))
poly <- function(...,min=-Inf,max=Inf){
coefficients <- as.numeric(unlist(list(...)))
degree <- length(coefficients)-1
fun<- function(x) {
y <- x
zeros <- (x < min | max < x)
y <- x[min <= x & x <= max]
res <- rep(0,length(x))
ym <- matrix(rep(y,times=degree+1),ncol=degree+1)
deg <- matrix(rep(0:degree,each=length(y)),ncol=degree+1)
co <- matrix(rep(coefficients,each=length(y)),ncol=degree+1)
res[!zeros] <- rowSums(co*ym^deg)
res
}
structure(fun,
class="poly")
}
x <- poly(1,2,3)
x
x(1)
x(2)
x(3)
x
environment(x)$coefficients
length.poly <- function(x,...)
{
length(x$coefs)
}
length(x)
length.poly <- function(x,...)
{
length(environment(x)$coefficients)
}
coef.poly <- function(x,...)
{
environment(x)$coefficients
}
x
coef(x)
length(x)
length.poly <- function(x,...)
{
length(environment(x)$coefficients)-1
}
length(x)
mtcars
mtcars %>% mean(mpg,ignore_me=.)
library(magrittr)
mtcars %>% mean(mpg,ignore_me=.)
mtcars %>% mean(.$mpg,ignore_me=.)
